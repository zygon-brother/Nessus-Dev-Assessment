{"version":3,"sources":["tests.js"],"names":["test","require","request","server","controller","waitForPort","beforeEach","t","err","raise","start","afterEach","stop","populateMultipleHosts","setTestVals","serial","plan","res","get","set","hosts","JSON","parse","text","is","status","id","ipv4","name","length","host","host_str","stringify","post","send","header","location","updated_host","put","delete","only","hosts_to_del"],"mappings":"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","file":"tests.js","sourcesContent":["const test = require('ava');\r\nconst request = require('supertest');\r\nconst server = require('../server');\r\nconst controller = require('../controllers');\r\n\r\nvar waitForPort = require('wait-for-port');\r\n\r\ntest.beforeEach(t => {\r\n\t\r\n\twaitForPort('localhost', 8080, {\"numRetries\": 10}, function(err) {\r\n\t\tif(err) raise(err);\r\n\t});\r\n\tserver().start(err => {\r\n\t});\r\n\r\n});\r\n\r\ntest.afterEach( t => {\r\n\tserver().stop();\r\n\twaitForPort('localhost', 8080, {\"numRetries\": 10}, function(err) {\r\n\t\tif(err) raise(err);\r\n\t});\r\n});\r\n\r\n\r\nfunction populateMultipleHosts()\r\n{\r\n\tcontroller.setTestVals(\r\n\t   {\r\n\t\t   \"hosts\": [\r\n\t\t       {\r\n\t\t\t\t   \"id\": 1,\r\n\t\t\t\t   \"name\": \"localhost.localdomain\",\r\n\t\t\t\t   \"ipv4\": \"127.0.0.1\"\r\n\t\t       },\r\n\t\t       {\r\n\t\t\t\t   \"id\": 100,\r\n\t\t\t\t   \"name\": \"localhost.hundredshire\",\r\n\t\t\t\t   \"ipv4\": \"127.10.10.1\"\r\n\t\t       },\r\n\t\t       {\r\n\t\t\t\t   \"id\": 103,\r\n\t\t\t\t   \"name\": \"google.com\",\r\n\t\t\t\t   \"ipv4\": \"172.217.3.216\"\r\n\t\t       }\r\n\t\t  \r\n\t\t   ]\r\n\t   }\r\n\t);\r\n}\r\n\r\ntest.serial('Get a list of hosts', async t => {\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tt.plan(5);\r\n\t\r\n\tconst res = await request('http://localhost:8080')\r\n\t    .get('/hosts')\r\n\t    .set('Accept', 'application/json');\r\n\r\n\tvar hosts = JSON.parse(res.text);\r\n    \r\n\tt.is(res.status, 200);\r\n\tt.is(hosts[0].id, 1);\r\n\tt.is(hosts[1].ipv4, \"127.10.10.1\");\r\n\tt.is(hosts[2].name, \"google.com\");\r\n\tt.is(hosts.length, 3);\r\n});\r\n\r\ntest.serial('Get a single valid host', async t => {\r\n\r\n\tt.plan(4);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tconst res = await request('http://localhost:8080')\r\n\t    .get('/host/100')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\tvar host = JSON.parse(res.text);\r\n\t\r\n\tt.is(res.status, 200);\r\n\tt.is(host.id, 100);\r\n\tt.is(host.ipv4, \"127.10.10.1\");\r\n\tt.is(host.name, \"localhost.hundredshire\");\r\n});\r\n\r\ntest.serial('Get a single invalid host', async t => {\r\n\r\n\tt.plan(2);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tconst res = await request('http://localhost:8080')\r\n\t    .get('/host/2')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\tt.is(res.status, 404);\r\n\tt.is(res.text, \"Host not found\");\r\n});\r\n\r\ntest.serial('Create a single host', async t => {\r\n\tvar host = {\r\n\t\t\"id\": 44,\r\n\t\t\"name\": \"hosttoadd.tenable.com\",\r\n\t\t\"ipv4\": \"127.14.14.100\"\r\n\t};\r\n\t\r\n\tcontroller.setTestVals({\"hosts\": []});\r\n\t\r\n\tt.plan(6);\r\n\t\r\n\tvar host_str = JSON.stringify(host);\r\n\tvar res = await request('http://localhost:8080')\r\n\t\t.post('/host')\r\n\t\t.set('Content-Type', 'application/json')\r\n\t\t.send(host_str);\r\n\t\t\r\n\tt.is(res.status, 201);\r\n\tt.is(res.header.location, \"/host/0\");\r\n\t\r\n\tres = await request('http://localhost:8080')\r\n\t\t.get('/host/44')\r\n\t\t.set('Accept', 'application/json');\r\n\t\r\n\tvar host = JSON.parse(res.text);\r\n\t\r\n\tt.is(res.status, 200);\r\n\tt.is(host.id, 44);\r\n\tt.is(host.ipv4, \"127.14.14.100\");\r\n\tt.is(host.name, \"hosttoadd.tenable.com\");\r\n});\r\n\r\ntest.serial('Update a single host', async t => {\r\n\t\r\n    populateMultipleHosts();\r\n\t\r\n\tvar updated_host = {\r\n\t\t\"id\": 101,\r\n\t\t\"name\": \"different-host.tenable.com\",\r\n\t\t\"ipv4\": \"127.22.14.116\"\r\n\t};\r\n\t\r\n\tvar host_str = JSON.stringify(updated_host);\r\n\tvar res = await request('http://localhost:8080')\r\n\t    .put('/host/103')\r\n\t\t.set('Content-Type', 'application/json')\r\n\t\t.send(host_str);\r\n\t\t\r\n\tt.is(res.status, 200);\r\n\t\r\n\tres = await request('http://localhost:8080')\r\n\t\t.get('/host/103')\r\n\t\t.set('Accept', 'application/json');\r\n\t\r\n\tvar host = JSON.parse(res.text);\r\n\t\r\n\tt.is(res.status, 200);\r\n\tt.is(host.id, 103);\r\n\tt.is(host.ipv4, \"127.22.14.116\");\r\n\tt.is(host.name, \"different-host.tenable.com\");\t\r\n});\r\n\r\ntest.serial('Delete a single host', async t => {\r\n\r\n\tt.plan(3);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tvar res = await request('http://localhost:8080')\r\n\t    .delete('/host/1')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\t\r\n\tt.is(res.status, 200);\r\n\t\r\n\tres = await request('http://localhost:8080')\r\n\t    .get('/host/1')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\tt.is(res.status, 404);\r\n\tt.is(res.text, \"Host not found\");\r\n});\r\n\r\ntest.serial('Delete all hosts', async t => {\r\n\t\r\n\tt.plan(3);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tvar res = await request('http://localhost:8080')\r\n\t    .delete('/hosts')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\t\r\n\tt.is(res.status, 200);\r\n\t\r\n\tres = await request('http://localhost:8080')\r\n\t    .get('/hosts')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\tvar hosts = JSON.parse(res.text);\r\n    \r\n\tt.is(res.status, 200);\r\n\tt.is(hosts.length, 0);\r\n\t\r\n});\r\n\r\ntest.only('Delete selected hosts', async t => {\r\n\tt.plan(3);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tvar hosts_to_del = [103, 1];\r\n\r\n\thosts_to_del = JSON.stringify(hosts_to_del);\r\n\t\r\n\tvar res = await request('http://localhost:8080')\r\n\t    .delete('/hosts')\r\n\t    .set('Content-Type', 'application/json')\r\n\t\t.send(hosts_to_del);\r\n\t\r\n\tt.is(res.status, 200);\r\n\t\r\n\tres = await request('http://localhost:8080')\r\n\t    .get('/hosts')\r\n\t    .set('Accept', 'application/json');\r\n\t\r\n\tvar hosts = JSON.parse(res.text);\r\n    \r\n\tt.is(res.status, 200);\r\n\tt.is(hosts.length, 1);\r\n});"]}