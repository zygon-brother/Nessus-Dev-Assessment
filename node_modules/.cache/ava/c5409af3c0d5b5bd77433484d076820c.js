'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');
const request = require('supertest');
const server = require('../server');
const controller = require('../controllers');

test.beforeEach(t => {
	server().start();
});

function populateMultipleHosts() {
	controller.setTestVals({
		"hosts": [{
			"id": 1,
			"name": "localhost.localdomain",
			"ipv4": "127.0.0.1"
		}, {
			"id": 100,
			"name": "localhost.hundredshire",
			"ipv4": "127.10.10.1"
		}, {
			"id": 103,
			"name": "google.com",
			"ipv4": "172.217.3.216"
		}]
	});
}

test('Get a list of hosts', (() => {
	var _ref = _asyncToGenerator(function* (t) {

		populateMultipleHosts();

		t.plan(5);

		const res = yield request('http://localhost:8080').get('/hosts').set('Accept', 'application/json');

		var hosts = JSON.parse(res.text);

		t.is(res.status, 200);
		t.is(hosts[0].id, 1);
		t.is(hosts[1].ipv4, "127.10.10.1");
		t.is(hosts[2].name, "google.com");
		t.is(hosts.length, 3);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
})());

test.only('Get a single valid host', (() => {
	var _ref2 = _asyncToGenerator(function* (t) {

		t.plan(4);

		populateMultipleHosts();

		const res = yield request('http://localhost:8080').get('/host/100').set('Accept', 'application/json');

		console.log(res.text);
		var host = JSON.parse(res.text);

		t.is(res.status, 200);
		t.is(host.id, 2);
		t.is(host.ipv4, "127.10.10.1");
		t.is(host.name, "localhost.hundredshire");
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
})());

/*
test('Get a single invalid host', async t => {

	t.plan(1);

    populateMultipleHosts();
	
	const res = await request('http://localhost:8080')
	    .get('/host/2')
	    .set('Accept', 'application/json')
		
	var host = JSON.parse(res.text);
	
	t.is(res.status, 404);s
});
*/
//# sourceMappingURL=..\node_modules\.cache\ava\c5409af3c0d5b5bd77433484d076820c.js.map