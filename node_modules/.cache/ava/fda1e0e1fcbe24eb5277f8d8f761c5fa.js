'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const test = require('ava');
const request = require('supertest');
const server = require('../server');
const controller = require('../controllers');

var waitForPort = require('wait-for-port');

test.beforeEach(t => {

	waitForPort('localhost', 8080, { "numRetries": 10 }, function (err) {
		if (err) raise(err);
	});
	server().start(err => {});
});

test.afterEach(t => {
	server().stop();
	waitForPort('localhost', 8080, { "numRetries": 10 }, function (err) {
		if (err) raise(err);
	});
});

function populateMultipleHosts() {
	controller.setTestVals({
		"hosts": [{
			"id": 1,
			"name": "localhost.localdomain",
			"ipv4": "127.0.0.1"
		}, {
			"id": 100,
			"name": "localhost.hundredshire",
			"ipv4": "127.10.10.1"
		}, {
			"id": 103,
			"name": "google.com",
			"ipv4": "172.217.3.216"
		}]
	});
}

test.serial('Get a list of hosts', (() => {
	var _ref = _asyncToGenerator(function* (t) {

		populateMultipleHosts();

		t.plan(5);

		const res = yield request('http://localhost:8080').get('/hosts').set('Accept', 'application/json');

		var hosts = JSON.parse(res.text);

		t.is(res.status, 200);
		t.is(hosts[0].id, 1);
		t.is(hosts[1].ipv4, "127.10.10.1");
		t.is(hosts[2].name, "google.com");
		t.is(hosts.length, 3);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
})());

test.serial('Get a single valid host', (() => {
	var _ref2 = _asyncToGenerator(function* (t) {

		t.plan(4);

		populateMultipleHosts();

		const res = yield request('http://localhost:8080').get('/host/100').set('Accept', 'application/json');

		var host = JSON.parse(res.text);

		t.is(res.status, 200);
		t.is(host.id, 100);
		t.is(host.ipv4, "127.10.10.1");
		t.is(host.name, "localhost.hundredshire");
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
})());

test.serial('Get a single invalid host', (() => {
	var _ref3 = _asyncToGenerator(function* (t) {

		t.plan(2);

		populateMultipleHosts();

		const res = yield request('http://localhost:8080').get('/host/2').set('Accept', 'application/json');

		t.is(res.status, 404);
		t.is(res.text, "Host not found");
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
})());

test.serial('Create a single host', (() => {
	var _ref4 = _asyncToGenerator(function* (t) {
		var host = {
			"id": 44,
			"name": "hosttoadd.tenable.com",
			"ipv4": "127.14.14.100"
		};

		t.plan(2);

		var host_str = JSON.stringify(host);
		const res = yield request('http://localhost:8080').post('/host').set('Content-Type', 'application/json').send(host_str);

		t.is(res.status, 201);
		t.is(res.header.location, "/host/0");
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
})());

test.only('Update a single host', (() => {
	var _ref5 = _asyncToGenerator(function* (t) {

		populateMultipleHosts();

		var updated_host = {
			"id": 101,
			"name": "different-host.tenable.com",
			"ipv4": "127.22.14.116"
		};

		var host_str = JSON.stringify(updated_host);
		const res = yield request('http://localhost:8080').put('/host/101').set('Content-Type', 'application/json').send(host_str);

		t.is(res.status, 200);

		res = yield request('http://localhost:8080').get('/host/101').set('Accept', 'application/json');

		var host = JSON.parse(res.text);

		t.is(res.status, 200);
		t.is(host.id, 101);
		t.is(host.ipv4, "127.22.14.116");
		t.is(host.name, "different-host.tenable.com");
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
})());
//# sourceMappingURL=..\node_modules\.cache\ava\fda1e0e1fcbe24eb5277f8d8f761c5fa.js.map