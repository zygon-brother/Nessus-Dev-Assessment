{"version":3,"sources":["tests.js"],"names":["test","require","request","server","controller","waitForPort","beforeEach","t","err","start","populateMultipleHosts","setTestVals","only","plan","get","set","end","res","hosts","JSON","parse","text","is","status","id","ipv4","name","length","host"],"mappings":";;;;AAAA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,UAAUD,QAAQ,WAAR,CAAhB;AACA,MAAME,SAASF,QAAQ,WAAR,CAAf;AACA,MAAMG,aAAaH,QAAQ,gBAAR,CAAnB;;AAEA,IAAII,cAAcJ,QAAQ,eAAR,CAAlB;;AAEAD,KAAKM,UAAL,CAAgBC,KAAK;AACpBF,aAAY,WAAZ,EAAyB,IAAzB,EAA+B,UAASG,GAAT,EAAc;AAC1CL,WAASM,KAAT;AACF,EAFD;AAGA,CAJD;;AAOA,SAASC,qBAAT,GACA;AACCN,YAAWO,WAAX,CACG;AACC,WAAS,CACL;AACF,SAAM,CADJ;AAEF,WAAQ,uBAFN;AAGF,WAAQ;AAHN,GADK,EAML;AACF,SAAM,GADJ;AAEF,WAAQ,wBAFN;AAGF,WAAQ;AAHN,GANK,EAWL;AACF,SAAM,GADJ;AAEF,WAAQ,YAFN;AAGF,WAAQ;AAHN,GAXK;AADV,EADH;AAsBA;;AAEDX,KAAKY,IAAL,CAAU,qBAAV;AAAA,8BAAiC,WAAML,CAAN,EAAW;;AAE3CF,cAAY,WAAZ,EAAyB,IAAzB,EAA+B,UAASG,GAAT,EAAc;;AAE5CL,YAASM,KAAT,CAAe,YAAY;;AAE1BC;;AAEAH,MAAEM,IAAF,CAAO,CAAP;;AAEAX,YAAQ,uBAAR,EACEY,GADF,CACM,QADN,EAEEC,GAFF,CAEM,QAFN,EAEgB,kBAFhB,EAGEC,GAHF,CAGMC,OAAO;;AAEX,SAAIC,QAAQC,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAZ;;AAEAd,OAAEe,EAAF,CAAKL,IAAIM,MAAT,EAAiB,GAAjB;AACAhB,OAAEe,EAAF,CAAKJ,MAAM,CAAN,EAASM,EAAd,EAAkB,CAAlB;AACAjB,OAAEe,EAAF,CAAKJ,MAAM,CAAN,EAASO,IAAd,EAAoB,aAApB;AACAlB,OAAEe,EAAF,CAAKJ,MAAM,CAAN,EAASQ,IAAd,EAAoB,YAApB;AACAnB,OAAEe,EAAF,CAAKJ,MAAMS,MAAX,EAAmB,CAAnB;AACA,KAZF;AAaA,IAnBD;AAoBA,GAtBD;AAuBA,EAzBD;;AAAA;AAAA;AAAA;AAAA;;AA2BA3B,KAAK,yBAAL;AAAA,+BAAgC,WAAMO,CAAN,EAAW;;AAE1CA,IAAEM,IAAF,CAAO,CAAP;;AAEGH;;AAEH,QAAMO,MAAM,MAAMf,QAAQ,uBAAR,EACbY,GADa,CACT,WADS,EAEbC,GAFa,CAET,QAFS,EAEC,kBAFD,CAAlB;;AAIA,MAAIa,OAAOT,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAX;;AAEAd,IAAEe,EAAF,CAAKL,IAAIM,MAAT,EAAiB,GAAjB;AACAhB,IAAEe,EAAF,CAAKM,KAAKJ,EAAV,EAAc,GAAd;AACAjB,IAAEe,EAAF,CAAKM,KAAKH,IAAV,EAAgB,aAAhB;AACAlB,IAAEe,EAAF,CAAKM,KAAKF,IAAV,EAAgB,wBAAhB;AACA,EAhBD;;AAAA;AAAA;AAAA;AAAA;;AAkBA1B,KAAK,2BAAL;AAAA,+BAAkC,WAAMO,CAAN,EAAW;;AAE5CA,IAAEM,IAAF,CAAO,CAAP;;AAEGH;;AAEH,QAAMO,MAAM,MAAMf,QAAQ,uBAAR,EACbY,GADa,CACT,SADS,EAEbC,GAFa,CAET,QAFS,EAEC,kBAFD,CAAlB;;AAIA,MAAIa,OAAOT,KAAKC,KAAL,CAAWH,IAAII,IAAf,CAAX;;AAEAd,IAAEe,EAAF,CAAKL,IAAIM,MAAT,EAAiB,GAAjB;AACA,EAbD;;AAAA;AAAA;AAAA;AAAA","file":"tests.js","sourcesContent":["const test = require('ava');\r\nconst request = require('supertest');\r\nconst server = require('../server');\r\nconst controller = require('../controllers');\r\n\r\nvar waitForPort = require('wait-for-port');\r\n\r\ntest.beforeEach(t => {\r\n\twaitForPort('localhost', 8080, function(err) {\r\n\t   server().start();\r\n\t});\r\n});\r\n\r\n\r\nfunction populateMultipleHosts()\r\n{\r\n\tcontroller.setTestVals(\r\n\t   {\r\n\t\t   \"hosts\": [\r\n\t\t       {\r\n\t\t\t\t   \"id\": 1,\r\n\t\t\t\t   \"name\": \"localhost.localdomain\",\r\n\t\t\t\t   \"ipv4\": \"127.0.0.1\"\r\n\t\t       },\r\n\t\t       {\r\n\t\t\t\t   \"id\": 100,\r\n\t\t\t\t   \"name\": \"localhost.hundredshire\",\r\n\t\t\t\t   \"ipv4\": \"127.10.10.1\"\r\n\t\t       },\r\n\t\t       {\r\n\t\t\t\t   \"id\": 103,\r\n\t\t\t\t   \"name\": \"google.com\",\r\n\t\t\t\t   \"ipv4\": \"172.217.3.216\"\r\n\t\t       }\r\n\t\t  \r\n\t\t   ]\r\n\t   }\r\n\t);\r\n}\r\n\r\ntest.only('Get a list of hosts', async t => {\r\n\t\r\n\twaitForPort('localhost', 8080, function(err) {\r\n\t\t\r\n\t\tserver().start(function () {\r\n\r\n\t\t\tpopulateMultipleHosts();\r\n\t\t\t\r\n\t\t\tt.plan(5);\r\n\t\t\t\r\n\t\t\trequest('http://localhost:8080')\r\n\t\t\t\t.get('/hosts')\r\n\t\t\t\t.set('Accept', 'application/json')\r\n\t\t\t\t.end(res => {\r\n\r\n\t\t\t\t\tvar hosts = JSON.parse(res.text);\r\n\t\t\t\t\t\r\n\t\t\t\t\tt.is(res.status, 200);\r\n\t\t\t\t\tt.is(hosts[0].id, 1);\r\n\t\t\t\t\tt.is(hosts[1].ipv4, \"127.10.10.1\");\r\n\t\t\t\t\tt.is(hosts[2].name, \"google.com\");\r\n\t\t\t\t\tt.is(hosts.length, 3);\r\n\t\t\t\t});\r\n\t\t});\r\n\t});\r\n});\r\n\r\ntest('Get a single valid host', async t => {\r\n\r\n\tt.plan(4);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tconst res = await request('http://localhost:8080')\r\n\t    .get('/host/100')\r\n\t    .set('Accept', 'application/json')\r\n\t\r\n\tvar host = JSON.parse(res.text);\r\n\t\r\n\tt.is(res.status, 200);\r\n\tt.is(host.id, 100);\r\n\tt.is(host.ipv4, \"127.10.10.1\");\r\n\tt.is(host.name, \"localhost.hundredshire\");\r\n});\r\n\r\ntest('Get a single invalid host', async t => {\r\n\r\n\tt.plan(1);\r\n\r\n    populateMultipleHosts();\r\n\t\r\n\tconst res = await request('http://localhost:8080')\r\n\t    .get('/host/2')\r\n\t    .set('Accept', 'application/json')\r\n\t\t\r\n\tvar host = JSON.parse(res.text);\r\n\t\r\n\tt.is(res.status, 404);\r\n});\r\n"]}